#!/usr/bin/env bash
set -eo pipefail
[[ $DOKKU_TRACE ]] && set -x

hook-apt-pre-build-buildpack() {
  declare APP="$1"
  local IMAGE="dokku/$APP" DIR=/app
  local COMMAND

  echo "-----> Injecting apt repositories and packages ..."

  COMMAND=$(
    cat <<EOF
export DEBIAN_FRONTEND=noninteractive
if [ -f $DIR/apt-env ]; then
    echo "-----> sourcing apt env ..."
    source $DIR/apt-env
fi
if [ -d $DIR/apt-preferences ]; then
    echo "-----> injecting apt preferences ..."
    mv -v $DIR/apt-preferences /etc/apt/preferences.d/90customizations
fi
if [ -f $DIR/apt-sources-list ]; then
    echo "-----> using customized sources.list ..."
    mv -v $DIR/apt-sources-list /etc/apt/sources.list
fi
if [ -f $DIR/apt-repositories ]; then
    apt-get update
    apt-get install -y software-properties-common apt-transport-https
    cat "$DIR/apt-repositories" | while read repository; do
        if [ -n "\$repository" ]; then
            add-apt-repository -y "\$repository"
        fi
    done
fi
if [ -f $DIR/apt-debconf ]; then
    cat "$DIR/apt-debconf" | while read conf; do
        if [ -n "\$conf" ]; then
            echo \$conf | debconf-set-selections
        fi
    done
fi
if [ -f $DIR/apt-packages ]; then
    PACKAGES=\$(cat "$DIR/apt-packages" | tr "\\n" " ")
    apt-get update
    apt-get install -y \$PACKAGES
    echo "-----> Injected packages: \$PACKAGES"
fi
if [ -d $DIR/dpkg-packages ]; then
    for pkg in $DIR/dpkg-packages/*.deb; do
        dpkg -i \$pkg
        echo "-----> Injected package: \$pkg"
    done
fi
sleep 1 # wait so that docker run has not exited before docker attach
EOF
  )
  CID=$(docker run -d "$IMAGE" /bin/bash -e -c "$COMMAND")
  #enable logs
  docker attach "$CID"
  test "$(docker wait "$CID")" -eq 0
  docker commit "$CID" "$IMAGE" >/dev/null
}

hook-apt-pre-build-buildpack "$@"
